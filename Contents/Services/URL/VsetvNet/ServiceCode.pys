RE_VIDEO_URL = Regex('["\'=](?P<video_url>https?:\/\/.+\.m3u8.*)["\']')

def MetadataObjectForURL(url):

    page = HTML.ElementFromURL(url)

    title = page.xpath('//meta[@name="title"]/@content')[0]

    tv_node = page.xpath('//div[@id="con"]/div[@class="con_tv"]/div[@class="tv"]')[0]

    description = tv_node.xpath('./div[@id="o_kan"]//strong/text()')

    if len(description) > 0:
        description = description[0]
    else:
        description = None

    thumb = 'http://vsetv.net/%s' % (tv_node.xpath('./div[@id="o_kan"]/img/@src')[0])

    Log.Debug("Meta object requested url: %s, title: %s" % (url, title))

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = Resource.ContentsOfURLWithFallback(thumb)
    )


def MediaObjectsForURL(url):

    Log.Debug("Media objects requested: %s" % (url))

    return [
        MediaObject(
            video_resolution = 576,
            audio_channels = 2,
            parts = [
                PartObject(key = HTTPLiveStreamURL(Callback(PlayVideo, url=url)))
            ]
        )
    ]

@indirect
def PlayVideo(url):

    content = HTTP.Request(url).content

    video_url = RE_VIDEO_URL.search(content).group('video_url')

    Log.Debug("Requested url: %s, Playing url: %s" % (url, video_url))

    return IndirectResponse(VideoClipObject, key=video_url)
